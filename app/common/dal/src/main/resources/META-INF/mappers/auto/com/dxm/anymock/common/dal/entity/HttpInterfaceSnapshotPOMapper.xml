<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dxm.anymock.common.dal.mapper.auto.HttpInterfaceSnapshotPOMapper">
  <resultMap id="BaseResultMap" type="com.dxm.anymock.common.dal.entity.HttpInterfaceSnapshotPO">
    <id column="snapshot_id" jdbcType="BIGINT" property="snapshotId" />
    <result column="id" jdbcType="BIGINT" property="id" />
    <result column="request_uri" jdbcType="VARCHAR" property="requestUri" />
    <result column="request_method" jdbcType="VARCHAR" property="requestMethod" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="need_async_callback" jdbcType="BIT" property="needAsyncCallback" />
    <result column="config_mode" jdbcType="INTEGER" property="configMode" />
    <result column="callback_request_url" jdbcType="VARCHAR" property="callbackRequestUrl" />
    <result column="callback_request_method" jdbcType="VARCHAR" property="callbackRequestMethod" />
    <result column="sync_delay" jdbcType="INTEGER" property="syncDelay" />
    <result column="async_delay" jdbcType="INTEGER" property="asyncDelay" />
    <result column="start" jdbcType="BIT" property="start" />
    <result column="sub_space_id" jdbcType="BIGINT" property="subSpaceId" />
    <result column="op_type" jdbcType="INTEGER" property="opType" />
    <result column="snapshot_time" jdbcType="TIMESTAMP" property="snapshotTime" />
    <result column="last_update_user" jdbcType="VARCHAR" property="lastUpdateUser" />
    <result column="last_update_time" jdbcType="TIMESTAMP" property="lastUpdateTime" />
    <result column="op_user" jdbcType="VARCHAR" property="opUser" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.dxm.anymock.common.dal.entity.HttpInterfaceSnapshotPOWithBLOBs">
    <result column="response_body" jdbcType="LONGVARCHAR" property="responseBody" />
    <result column="callback_request_body" jdbcType="LONGVARCHAR" property="callbackRequestBody" />
    <result column="branch_jump_script" jdbcType="LONGVARCHAR" property="branchJumpScript" />
    <result column="sync_script" jdbcType="LONGVARCHAR" property="syncScript" />
    <result column="async_script" jdbcType="LONGVARCHAR" property="asyncScript" />
    <result column="response_header_list" jdbcType="LONGVARCHAR" property="responseHeaderList" />
    <result column="callback_request_header_list" jdbcType="LONGVARCHAR" property="callbackRequestHeaderList" />
    <result column="branch_script_list" jdbcType="LONGVARCHAR" property="branchScriptList" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    snapshot_id, id, request_uri, request_method, description, need_async_callback, config_mode, 
    callback_request_url, callback_request_method, sync_delay, async_delay, start, sub_space_id, 
    op_type, snapshot_time, last_update_user, last_update_time, op_user
  </sql>
  <sql id="Blob_Column_List">
    response_body, callback_request_body, branch_jump_script, sync_script, async_script, 
    response_header_list, callback_request_header_list, branch_script_list
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.dxm.anymock.common.dal.entity.HttpInterfaceSnapshotPOExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from am_http_interface_snapshot
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.dxm.anymock.common.dal.entity.HttpInterfaceSnapshotPOExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from am_http_interface_snapshot
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from am_http_interface_snapshot
    where snapshot_id = #{snapshotId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from am_http_interface_snapshot
    where snapshot_id = #{snapshotId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.dxm.anymock.common.dal.entity.HttpInterfaceSnapshotPOExample">
    delete from am_http_interface_snapshot
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.dxm.anymock.common.dal.entity.HttpInterfaceSnapshotPOWithBLOBs">
    insert into am_http_interface_snapshot (snapshot_id, id, request_uri, 
      request_method, description, need_async_callback, 
      config_mode, callback_request_url, callback_request_method, 
      sync_delay, async_delay, start, 
      sub_space_id, op_type, snapshot_time, 
      last_update_user, last_update_time, op_user, 
      response_body, callback_request_body, 
      branch_jump_script, sync_script, async_script, 
      response_header_list, callback_request_header_list, 
      branch_script_list)
    values (#{snapshotId,jdbcType=BIGINT}, #{id,jdbcType=BIGINT}, #{requestUri,jdbcType=VARCHAR}, 
      #{requestMethod,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR}, #{needAsyncCallback,jdbcType=BIT}, 
      #{configMode,jdbcType=INTEGER}, #{callbackRequestUrl,jdbcType=VARCHAR}, #{callbackRequestMethod,jdbcType=VARCHAR}, 
      #{syncDelay,jdbcType=INTEGER}, #{asyncDelay,jdbcType=INTEGER}, #{start,jdbcType=BIT}, 
      #{subSpaceId,jdbcType=BIGINT}, #{opType,jdbcType=INTEGER}, #{snapshotTime,jdbcType=TIMESTAMP}, 
      #{lastUpdateUser,jdbcType=VARCHAR}, #{lastUpdateTime,jdbcType=TIMESTAMP}, #{opUser,jdbcType=VARCHAR}, 
      #{responseBody,jdbcType=LONGVARCHAR}, #{callbackRequestBody,jdbcType=LONGVARCHAR}, 
      #{branchJumpScript,jdbcType=LONGVARCHAR}, #{syncScript,jdbcType=LONGVARCHAR}, #{asyncScript,jdbcType=LONGVARCHAR}, 
      #{responseHeaderList,jdbcType=LONGVARCHAR}, #{callbackRequestHeaderList,jdbcType=LONGVARCHAR}, 
      #{branchScriptList,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.dxm.anymock.common.dal.entity.HttpInterfaceSnapshotPOWithBLOBs">
    insert into am_http_interface_snapshot
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="snapshotId != null">
        snapshot_id,
      </if>
      <if test="id != null">
        id,
      </if>
      <if test="requestUri != null">
        request_uri,
      </if>
      <if test="requestMethod != null">
        request_method,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="needAsyncCallback != null">
        need_async_callback,
      </if>
      <if test="configMode != null">
        config_mode,
      </if>
      <if test="callbackRequestUrl != null">
        callback_request_url,
      </if>
      <if test="callbackRequestMethod != null">
        callback_request_method,
      </if>
      <if test="syncDelay != null">
        sync_delay,
      </if>
      <if test="asyncDelay != null">
        async_delay,
      </if>
      <if test="start != null">
        start,
      </if>
      <if test="subSpaceId != null">
        sub_space_id,
      </if>
      <if test="opType != null">
        op_type,
      </if>
      <if test="snapshotTime != null">
        snapshot_time,
      </if>
      <if test="lastUpdateUser != null">
        last_update_user,
      </if>
      <if test="lastUpdateTime != null">
        last_update_time,
      </if>
      <if test="opUser != null">
        op_user,
      </if>
      <if test="responseBody != null">
        response_body,
      </if>
      <if test="callbackRequestBody != null">
        callback_request_body,
      </if>
      <if test="branchJumpScript != null">
        branch_jump_script,
      </if>
      <if test="syncScript != null">
        sync_script,
      </if>
      <if test="asyncScript != null">
        async_script,
      </if>
      <if test="responseHeaderList != null">
        response_header_list,
      </if>
      <if test="callbackRequestHeaderList != null">
        callback_request_header_list,
      </if>
      <if test="branchScriptList != null">
        branch_script_list,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="snapshotId != null">
        #{snapshotId,jdbcType=BIGINT},
      </if>
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="requestUri != null">
        #{requestUri,jdbcType=VARCHAR},
      </if>
      <if test="requestMethod != null">
        #{requestMethod,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="needAsyncCallback != null">
        #{needAsyncCallback,jdbcType=BIT},
      </if>
      <if test="configMode != null">
        #{configMode,jdbcType=INTEGER},
      </if>
      <if test="callbackRequestUrl != null">
        #{callbackRequestUrl,jdbcType=VARCHAR},
      </if>
      <if test="callbackRequestMethod != null">
        #{callbackRequestMethod,jdbcType=VARCHAR},
      </if>
      <if test="syncDelay != null">
        #{syncDelay,jdbcType=INTEGER},
      </if>
      <if test="asyncDelay != null">
        #{asyncDelay,jdbcType=INTEGER},
      </if>
      <if test="start != null">
        #{start,jdbcType=BIT},
      </if>
      <if test="subSpaceId != null">
        #{subSpaceId,jdbcType=BIGINT},
      </if>
      <if test="opType != null">
        #{opType,jdbcType=INTEGER},
      </if>
      <if test="snapshotTime != null">
        #{snapshotTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastUpdateUser != null">
        #{lastUpdateUser,jdbcType=VARCHAR},
      </if>
      <if test="lastUpdateTime != null">
        #{lastUpdateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="opUser != null">
        #{opUser,jdbcType=VARCHAR},
      </if>
      <if test="responseBody != null">
        #{responseBody,jdbcType=LONGVARCHAR},
      </if>
      <if test="callbackRequestBody != null">
        #{callbackRequestBody,jdbcType=LONGVARCHAR},
      </if>
      <if test="branchJumpScript != null">
        #{branchJumpScript,jdbcType=LONGVARCHAR},
      </if>
      <if test="syncScript != null">
        #{syncScript,jdbcType=LONGVARCHAR},
      </if>
      <if test="asyncScript != null">
        #{asyncScript,jdbcType=LONGVARCHAR},
      </if>
      <if test="responseHeaderList != null">
        #{responseHeaderList,jdbcType=LONGVARCHAR},
      </if>
      <if test="callbackRequestHeaderList != null">
        #{callbackRequestHeaderList,jdbcType=LONGVARCHAR},
      </if>
      <if test="branchScriptList != null">
        #{branchScriptList,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.dxm.anymock.common.dal.entity.HttpInterfaceSnapshotPOExample" resultType="java.lang.Long">
    select count(*) from am_http_interface_snapshot
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update am_http_interface_snapshot
    <set>
      <if test="record.snapshotId != null">
        snapshot_id = #{record.snapshotId,jdbcType=BIGINT},
      </if>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.requestUri != null">
        request_uri = #{record.requestUri,jdbcType=VARCHAR},
      </if>
      <if test="record.requestMethod != null">
        request_method = #{record.requestMethod,jdbcType=VARCHAR},
      </if>
      <if test="record.description != null">
        description = #{record.description,jdbcType=VARCHAR},
      </if>
      <if test="record.needAsyncCallback != null">
        need_async_callback = #{record.needAsyncCallback,jdbcType=BIT},
      </if>
      <if test="record.configMode != null">
        config_mode = #{record.configMode,jdbcType=INTEGER},
      </if>
      <if test="record.callbackRequestUrl != null">
        callback_request_url = #{record.callbackRequestUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.callbackRequestMethod != null">
        callback_request_method = #{record.callbackRequestMethod,jdbcType=VARCHAR},
      </if>
      <if test="record.syncDelay != null">
        sync_delay = #{record.syncDelay,jdbcType=INTEGER},
      </if>
      <if test="record.asyncDelay != null">
        async_delay = #{record.asyncDelay,jdbcType=INTEGER},
      </if>
      <if test="record.start != null">
        start = #{record.start,jdbcType=BIT},
      </if>
      <if test="record.subSpaceId != null">
        sub_space_id = #{record.subSpaceId,jdbcType=BIGINT},
      </if>
      <if test="record.opType != null">
        op_type = #{record.opType,jdbcType=INTEGER},
      </if>
      <if test="record.snapshotTime != null">
        snapshot_time = #{record.snapshotTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.lastUpdateUser != null">
        last_update_user = #{record.lastUpdateUser,jdbcType=VARCHAR},
      </if>
      <if test="record.lastUpdateTime != null">
        last_update_time = #{record.lastUpdateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.opUser != null">
        op_user = #{record.opUser,jdbcType=VARCHAR},
      </if>
      <if test="record.responseBody != null">
        response_body = #{record.responseBody,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.callbackRequestBody != null">
        callback_request_body = #{record.callbackRequestBody,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.branchJumpScript != null">
        branch_jump_script = #{record.branchJumpScript,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.syncScript != null">
        sync_script = #{record.syncScript,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.asyncScript != null">
        async_script = #{record.asyncScript,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.responseHeaderList != null">
        response_header_list = #{record.responseHeaderList,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.callbackRequestHeaderList != null">
        callback_request_header_list = #{record.callbackRequestHeaderList,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.branchScriptList != null">
        branch_script_list = #{record.branchScriptList,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update am_http_interface_snapshot
    set snapshot_id = #{record.snapshotId,jdbcType=BIGINT},
      id = #{record.id,jdbcType=BIGINT},
      request_uri = #{record.requestUri,jdbcType=VARCHAR},
      request_method = #{record.requestMethod,jdbcType=VARCHAR},
      description = #{record.description,jdbcType=VARCHAR},
      need_async_callback = #{record.needAsyncCallback,jdbcType=BIT},
      config_mode = #{record.configMode,jdbcType=INTEGER},
      callback_request_url = #{record.callbackRequestUrl,jdbcType=VARCHAR},
      callback_request_method = #{record.callbackRequestMethod,jdbcType=VARCHAR},
      sync_delay = #{record.syncDelay,jdbcType=INTEGER},
      async_delay = #{record.asyncDelay,jdbcType=INTEGER},
      start = #{record.start,jdbcType=BIT},
      sub_space_id = #{record.subSpaceId,jdbcType=BIGINT},
      op_type = #{record.opType,jdbcType=INTEGER},
      snapshot_time = #{record.snapshotTime,jdbcType=TIMESTAMP},
      last_update_user = #{record.lastUpdateUser,jdbcType=VARCHAR},
      last_update_time = #{record.lastUpdateTime,jdbcType=TIMESTAMP},
      op_user = #{record.opUser,jdbcType=VARCHAR},
      response_body = #{record.responseBody,jdbcType=LONGVARCHAR},
      callback_request_body = #{record.callbackRequestBody,jdbcType=LONGVARCHAR},
      branch_jump_script = #{record.branchJumpScript,jdbcType=LONGVARCHAR},
      sync_script = #{record.syncScript,jdbcType=LONGVARCHAR},
      async_script = #{record.asyncScript,jdbcType=LONGVARCHAR},
      response_header_list = #{record.responseHeaderList,jdbcType=LONGVARCHAR},
      callback_request_header_list = #{record.callbackRequestHeaderList,jdbcType=LONGVARCHAR},
      branch_script_list = #{record.branchScriptList,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update am_http_interface_snapshot
    set snapshot_id = #{record.snapshotId,jdbcType=BIGINT},
      id = #{record.id,jdbcType=BIGINT},
      request_uri = #{record.requestUri,jdbcType=VARCHAR},
      request_method = #{record.requestMethod,jdbcType=VARCHAR},
      description = #{record.description,jdbcType=VARCHAR},
      need_async_callback = #{record.needAsyncCallback,jdbcType=BIT},
      config_mode = #{record.configMode,jdbcType=INTEGER},
      callback_request_url = #{record.callbackRequestUrl,jdbcType=VARCHAR},
      callback_request_method = #{record.callbackRequestMethod,jdbcType=VARCHAR},
      sync_delay = #{record.syncDelay,jdbcType=INTEGER},
      async_delay = #{record.asyncDelay,jdbcType=INTEGER},
      start = #{record.start,jdbcType=BIT},
      sub_space_id = #{record.subSpaceId,jdbcType=BIGINT},
      op_type = #{record.opType,jdbcType=INTEGER},
      snapshot_time = #{record.snapshotTime,jdbcType=TIMESTAMP},
      last_update_user = #{record.lastUpdateUser,jdbcType=VARCHAR},
      last_update_time = #{record.lastUpdateTime,jdbcType=TIMESTAMP},
      op_user = #{record.opUser,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.dxm.anymock.common.dal.entity.HttpInterfaceSnapshotPOWithBLOBs">
    update am_http_interface_snapshot
    <set>
      <if test="id != null">
        id = #{id,jdbcType=BIGINT},
      </if>
      <if test="requestUri != null">
        request_uri = #{requestUri,jdbcType=VARCHAR},
      </if>
      <if test="requestMethod != null">
        request_method = #{requestMethod,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="needAsyncCallback != null">
        need_async_callback = #{needAsyncCallback,jdbcType=BIT},
      </if>
      <if test="configMode != null">
        config_mode = #{configMode,jdbcType=INTEGER},
      </if>
      <if test="callbackRequestUrl != null">
        callback_request_url = #{callbackRequestUrl,jdbcType=VARCHAR},
      </if>
      <if test="callbackRequestMethod != null">
        callback_request_method = #{callbackRequestMethod,jdbcType=VARCHAR},
      </if>
      <if test="syncDelay != null">
        sync_delay = #{syncDelay,jdbcType=INTEGER},
      </if>
      <if test="asyncDelay != null">
        async_delay = #{asyncDelay,jdbcType=INTEGER},
      </if>
      <if test="start != null">
        start = #{start,jdbcType=BIT},
      </if>
      <if test="subSpaceId != null">
        sub_space_id = #{subSpaceId,jdbcType=BIGINT},
      </if>
      <if test="opType != null">
        op_type = #{opType,jdbcType=INTEGER},
      </if>
      <if test="snapshotTime != null">
        snapshot_time = #{snapshotTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastUpdateUser != null">
        last_update_user = #{lastUpdateUser,jdbcType=VARCHAR},
      </if>
      <if test="lastUpdateTime != null">
        last_update_time = #{lastUpdateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="opUser != null">
        op_user = #{opUser,jdbcType=VARCHAR},
      </if>
      <if test="responseBody != null">
        response_body = #{responseBody,jdbcType=LONGVARCHAR},
      </if>
      <if test="callbackRequestBody != null">
        callback_request_body = #{callbackRequestBody,jdbcType=LONGVARCHAR},
      </if>
      <if test="branchJumpScript != null">
        branch_jump_script = #{branchJumpScript,jdbcType=LONGVARCHAR},
      </if>
      <if test="syncScript != null">
        sync_script = #{syncScript,jdbcType=LONGVARCHAR},
      </if>
      <if test="asyncScript != null">
        async_script = #{asyncScript,jdbcType=LONGVARCHAR},
      </if>
      <if test="responseHeaderList != null">
        response_header_list = #{responseHeaderList,jdbcType=LONGVARCHAR},
      </if>
      <if test="callbackRequestHeaderList != null">
        callback_request_header_list = #{callbackRequestHeaderList,jdbcType=LONGVARCHAR},
      </if>
      <if test="branchScriptList != null">
        branch_script_list = #{branchScriptList,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where snapshot_id = #{snapshotId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.dxm.anymock.common.dal.entity.HttpInterfaceSnapshotPOWithBLOBs">
    update am_http_interface_snapshot
    set id = #{id,jdbcType=BIGINT},
      request_uri = #{requestUri,jdbcType=VARCHAR},
      request_method = #{requestMethod,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      need_async_callback = #{needAsyncCallback,jdbcType=BIT},
      config_mode = #{configMode,jdbcType=INTEGER},
      callback_request_url = #{callbackRequestUrl,jdbcType=VARCHAR},
      callback_request_method = #{callbackRequestMethod,jdbcType=VARCHAR},
      sync_delay = #{syncDelay,jdbcType=INTEGER},
      async_delay = #{asyncDelay,jdbcType=INTEGER},
      start = #{start,jdbcType=BIT},
      sub_space_id = #{subSpaceId,jdbcType=BIGINT},
      op_type = #{opType,jdbcType=INTEGER},
      snapshot_time = #{snapshotTime,jdbcType=TIMESTAMP},
      last_update_user = #{lastUpdateUser,jdbcType=VARCHAR},
      last_update_time = #{lastUpdateTime,jdbcType=TIMESTAMP},
      op_user = #{opUser,jdbcType=VARCHAR},
      response_body = #{responseBody,jdbcType=LONGVARCHAR},
      callback_request_body = #{callbackRequestBody,jdbcType=LONGVARCHAR},
      branch_jump_script = #{branchJumpScript,jdbcType=LONGVARCHAR},
      sync_script = #{syncScript,jdbcType=LONGVARCHAR},
      async_script = #{asyncScript,jdbcType=LONGVARCHAR},
      response_header_list = #{responseHeaderList,jdbcType=LONGVARCHAR},
      callback_request_header_list = #{callbackRequestHeaderList,jdbcType=LONGVARCHAR},
      branch_script_list = #{branchScriptList,jdbcType=LONGVARCHAR}
    where snapshot_id = #{snapshotId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.dxm.anymock.common.dal.entity.HttpInterfaceSnapshotPO">
    update am_http_interface_snapshot
    set id = #{id,jdbcType=BIGINT},
      request_uri = #{requestUri,jdbcType=VARCHAR},
      request_method = #{requestMethod,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      need_async_callback = #{needAsyncCallback,jdbcType=BIT},
      config_mode = #{configMode,jdbcType=INTEGER},
      callback_request_url = #{callbackRequestUrl,jdbcType=VARCHAR},
      callback_request_method = #{callbackRequestMethod,jdbcType=VARCHAR},
      sync_delay = #{syncDelay,jdbcType=INTEGER},
      async_delay = #{asyncDelay,jdbcType=INTEGER},
      start = #{start,jdbcType=BIT},
      sub_space_id = #{subSpaceId,jdbcType=BIGINT},
      op_type = #{opType,jdbcType=INTEGER},
      snapshot_time = #{snapshotTime,jdbcType=TIMESTAMP},
      last_update_user = #{lastUpdateUser,jdbcType=VARCHAR},
      last_update_time = #{lastUpdateTime,jdbcType=TIMESTAMP},
      op_user = #{opUser,jdbcType=VARCHAR}
    where snapshot_id = #{snapshotId,jdbcType=BIGINT}
  </update>
</mapper>